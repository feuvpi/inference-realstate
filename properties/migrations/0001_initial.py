# Generated by Django 5.2.6 on 2025-10-16 03:11

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name or identifier for this property', max_length=255, verbose_name='property name')),
                ('property_type', models.CharField(choices=[('apartment', 'Apartment'), ('house', 'House')], default='apartment', help_text='Type of property', max_length=20, verbose_name='property type')),
                ('description', models.TextField(blank=True, help_text='Additional notes or observations about this property', verbose_name='description')),
                ('street_address', models.CharField(help_text='Street name and number', max_length=255, verbose_name='street address')),
                ('neighborhood', models.CharField(blank=True, help_text='Neighborhood or district', max_length=100, verbose_name='neighborhood')),
                ('city', models.CharField(help_text='City name', max_length=100, verbose_name='city')),
                ('state', models.CharField(help_text='State or province', max_length=100, verbose_name='state/province')),
                ('zip_code', models.CharField(blank=True, help_text='Postal/ZIP code', max_length=20, verbose_name='postal code')),
                ('country', models.CharField(default='Brazil', help_text='Country', max_length=100, verbose_name='country')),
                ('latitude', models.DecimalField(blank=True, decimal_places=7, help_text='Latitude coordinate (for location-based analysis)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=7, help_text='Longitude coordinate (for location-based analysis)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='longitude')),
                ('price_per_sqm', models.DecimalField(blank=True, decimal_places=2, help_text='Transaction price per square meter (R$/m² or local currency)', max_digits=12, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='price per square meter')),
                ('total_price', models.DecimalField(blank=True, decimal_places=2, help_text='Total transaction price (if known)', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='total transaction price')),
                ('total_area', models.DecimalField(blank=True, decimal_places=2, help_text='Total built area in square meters', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='total area (m²)')),
                ('transaction_date', models.DateField(blank=True, help_text='Date of transaction (for market data)', null=True, verbose_name='transaction date')),
                ('is_subject', models.BooleanField(default=False, help_text='Mark as TRUE if this is the property being valued (target)', verbose_name='is subject property')),
                ('is_observed', models.BooleanField(default=True, help_text='Mark as TRUE if this is a comparable property with known price', verbose_name='is observed/comparable')),
                ('data_source', models.CharField(blank=True, help_text='Source of this data (e.g., "MLS", "Public Registry", "Direct Survey")', max_length=100, verbose_name='data source')),
                ('data_quality', models.CharField(choices=[('high', 'High - Verified transaction'), ('medium', 'Medium - Secondary source'), ('low', 'Low - Estimated/unverified')], default='medium', help_text='Reliability of this property data', max_length=20, verbose_name='data quality')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this property was added to the system')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last time this property data was updated')),
                ('user', models.ForeignKey(help_text='User who owns this property data', on_delete=django.db.models.deletion.CASCADE, related_name='properties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'property',
                'verbose_name_plural': 'properties',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', '-created_at'], name='properties__user_id_f8b557_idx'), models.Index(fields=['is_subject', 'is_observed'], name='properties__is_subj_e9567e_idx'), models.Index(fields=['city', 'property_type'], name='properties__city_15744f_idx')],
            },
        ),
    ]
